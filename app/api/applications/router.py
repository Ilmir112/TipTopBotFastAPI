from datetime import date, datetime

from fastapi import APIRouter, Depends
from fastapi.requests import Request
from fastapi.responses import JSONResponse
from app.api.applications.schemas import AppointmentData
from app.bot.create_bot import bot
from app.api.applications.dao import ApplicationDAO
from app.bot.keyboards.kbs import main_keyboard
from app.config import settings

router = APIRouter(prefix='/api', tags=['API'])


@router.get('/get_booked_times')
async def get_booked_times(appointment_date: date):
    time_list = ['09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00',
         '12:30', "13:00", "13:30", "14:00", "14:30", "15:00", "15:30",
         "16:00", "16:30", "17:00", "17:30"]
    result = await ApplicationDAO.get_booked_times(appointment_date)
    if result:
        result_strs = [t.strftime("%H:%M") for t in result]
        new_time_list = []
        for time in time_list:
            if any([time in result_strs]) is False:
                new_time_list.append(time)

        return new_time_list
    return time_list


@router.post("/appointment", response_class=JSONResponse)
async def create_appointment(request: Request):
    # –ü–æ–ª—É—á–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    data = await request.json()

    validated_data = AppointmentData(**data)

    # master_id, master_name = validated_data.master.split('_')
    service_id, service_name = validated_data.service.split('_')

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    result = await ApplicationDAO.add_appointment_if_available(
        user_id=validated_data.user_id,
        # master_id=int(master_id),
        service_id=int(service_id),
        appointment_date=validated_data.appointment_date,
        appointment_time=validated_data.appointment_time,
        client_name=validated_data.name
    )


    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    message = (
        f"üéâ <b>{validated_data.name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:</b>\n"
        f"üë§ <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {validated_data.name}\n"
        f"üíá <b>–£—Å–ª—É–≥–∞:</b> {service_name}\n"
        # f"‚úÇÔ∏è <b>–ú–∞—Å—Ç–µ—Ä:</b> {master_name}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {validated_data.appointment_date}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {validated_data.appointment_time}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞! ‚ú® –ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
    )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_message = (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n"
        "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
        f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {validated_data.name}\n"
        f"üíá –£—Å–ª—É–≥–∞: {service_name}\n"
        # f"‚úÇÔ∏è –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
        f"üìÖ –î–∞—Ç–∞: {validated_data.appointment_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {validated_data.appointment_time}"

    )


    kb = main_keyboard(user_id=validated_data.user_id, first_name=validated_data.name, has_phone=True)
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    if result:
        await bot.send_message(chat_id=validated_data.user_id, text=message, reply_markup=kb)
        await bot.send_message(chat_id=settings.ADMIN_ID, text=admin_message, reply_markup=kb)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {"message": "success!"}
    else:
        message = (
            f"üéâ <b>{validated_data.name}, "
            f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {validated_data.appointment_time} –ó–∞–Ω—è—Ç–æ \n\n"
            "–ü—Ä–æ—à—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )
        await bot.send_message(chat_id=validated_data.user_id, text=message, reply_markup=kb)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        return {"message": "busy"}



from datetime import date

from fastapi import APIRouter, Request, HTTPException
from fastapi.responses import JSONResponse
from app.api.applications.schemas import AppointmentData
from app.api.service.dao import ServiceDAO
from app.bot.create_bot import bot
from app.api.applications.dao import ApplicationDAO
from app.bot.handlers.user_router import check_admin
from app.bot.keyboards.kbs import main_keyboard
from app.config import settings
from app.logger import logger

router = APIRouter(prefix='/api', tags=['API'])


@router.get('/get_booked_times')
async def get_booked_times(appointment_date: date):
    time_list = ['09:00', '09:30', '10:00', '10:30', '11:00', '11:30', '12:00',
                 '12:30', "13:00", "13:30", "14:00", "14:30", "15:00", "15:30",
                 "16:00", "16:30", "17:00", "17:30"]
    try:
        result = await ApplicationDAO.get_booked_times(appointment_date)
        if result:
            result_strs = [t.strftime("%H:%M") for t in result]
            new_time_list = [time for time in time_list if not any(time == t for t in result_strs)]
            return new_time_list
        return time_list
    except Exception as e:
        logger.error(f"Error fetching booked times for {appointment_date}: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")


@router.get('/find_applications')
async def get_applications_all():
    try:
        applications_list = await ApplicationDAO.find_all()
        return applications_list
    except Exception as e:
        logger.error(f"Error fetching applications: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")


@router.post('/add')
async def add_appointment(data: AppointmentData):
    try:
        service = await ServiceDAO.find_all(service_name=data.service_name)
        if service:
            return await ApplicationDAO.add(
                client_name=data.name,
                service_id=service.service_id,
                appointment_date=data.appointment_date,
                appointment_time=data.appointment_time,
                user_id=data.user_id)
        else:
            raise HTTPException(status_code=404, detail="Service not found")
    except Exception as e:
        logger.error(f"Error adding appointment: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")



@router.post("/appointment", response_class=JSONResponse)
async def create_appointment(request: Request):
    try:
        data = await request.json()
    except Exception as e:
        logger.error(f"Error parsing JSON request body: {e}")
        raise HTTPException(status_code=400, detail="Invalid JSON payload")

    try:
        validated_data = AppointmentData(**data)
    except Exception as e:
        logger.error(f"Validation error for data {data}: {e}")
        raise HTTPException(status_code=422, detail="Validation error")

    try:
        service_id_str, service_name = validated_data.service.split('_')
    except Exception as e:
        logger.error(f"Error parsing service field '{validated_data.service}': {e}")
        raise HTTPException(status_code=400, detail="Invalid service format")

    try:
        result = await ApplicationDAO.add_appointment_if_available(
            user_id=validated_data.user_id,
            service_id=int(service_id_str),
            appointment_date=validated_data.appointment_date,
            appointment_time=validated_data.appointment_time,
            client_name=validated_data.name
        )
    except Exception as e:
        logger.error(f"Error adding appointment if available: {e}")
        raise HTTPException(status_code=500, detail="Internal Server Error")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    message = (
        f"üéâ <b>{validated_data.name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        "üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:</b>\n"
        f"üë§ <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {validated_data.name}\n"
        f"üíá <b>–£—Å–ª—É–≥–∞:</b> {service_name}\n"
        f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {validated_data.appointment_date}\n"
        f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {validated_data.appointment_time}\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞! ‚ú® –ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
    )

    admin_message = (
        "üîî <b>–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!</b>\n\n"
        "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
        f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {validated_data.name}\n"
        f"üíá –£—Å–ª—É–≥–∞: {service_name}\n"
        f"üìÖ –î–∞—Ç–∞: {validated_data.appointment_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {validated_data.appointment_time}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    try:
        if validated_data.user_id:
            kb = main_keyboard(user_id=validated_data.user_id, first_name=validated_data.name, has_phone=True)
            await bot.send_message(chat_id=validated_data.user_id, text=message, reply_markup=kb)

            if check_admin(validated_data.user_id):
                admin_chat_id = check_admin(validated_data.user_id)
                await bot.send_message(chat_id=admin_chat_id, text=admin_message, reply_markup=kb)
    except Exception as e:
        logger.error(f"Error sending messages via bot or creating keyboard: {e}")

    if result:
        return {"status": "success", "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"}
    else:
        # –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å
        message_busy = (
            f"üéâ <b>{validated_data.name}, "
            f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {validated_data.appointment_time} –ó–∞–Ω—è—Ç–æ \n\n"
            "–ü—Ä–æ—à—É –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
        )

        try:
            if validated_data.user_id:
                kb = main_keyboard(user_id=validated_data.user_id, first_name=validated_data.name, has_phone=True)
                await bot.send_message(chat_id=validated_data.user_id, text=message_busy, reply_markup=kb)
        except Exception as e:
            logger.error(f"Error sending busy time message via bot: {e}")

        return {"status": "busy", "message": "–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ"}


@router.delete("/delete", response_class=JSONResponse)
async def delete_application(request: Request, application_id: int):
    try:
        result = await ApplicationDAO.find_one_or_none(id=application_id)

        if not result:
            raise HTTPException(status_code=404, detail="Application not found")

        await ApplicationDAO.delete(id=application_id)

    except HTTPException as he:
        # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ –±–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –æ—à–∏–±–∫—É —Å–µ—Ä–≤–µ—Ä–∞
        raise he
    except Exception as e:
        logger.error(f"Error deleting application with id={application_id}: {e}")

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
    try:

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_user = (
            f"üéâ <b>{result.client_name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>\n\n"
            "üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:</b>\n"
            f"üë§ <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {result.client_name}\n"
            f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {result.appointment_date}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {result.appointment_time}\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞! ‚ú® –ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
        )

        # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        admin_message = (
            "üîî <b>–∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!</b>\n\n"
            "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
            f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {result.client_name}\n"
            f"üìÖ –î–∞—Ç–∞: {result.appointment_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {result.appointment_time}"
        )

        kb = main_keyboard(user_id=result.user_id, first_name=result.client_name, has_phone=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        try:
            await bot.send_message(chat_id=result.user_id, text=message_user, reply_markup=kb)
        except Exception as e:
            logger.error(f"Error sending message to user ID={result.user_id}: {e}")

        for admin_id in settings.ADMIN_LIST or []:
            try:
                await bot.send_message(chat_id=admin_id, text=admin_message)
            except Exception as e:
                logger.error(f"Error sending message to admin ID={admin_id}: {e}")

        return {"status": "success", "message": "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}

    except Exception as e:
        logger.error(f"Unexpected error during deletion process for application ID={application_id}: {e}")
        return {"status": "fail"}

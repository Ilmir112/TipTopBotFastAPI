from aiogram.types import ReplyKeyboardMarkup, WebAppInfo, InlineKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from app.config import settings



def main_keyboard(user_id: int, first_name: str, has_phone: bool=False) -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    url_applications = f"{settings.BASE_SITE}/applications?user_id={user_id}"
    url_add_application = f'{settings.BASE_SITE}/form?user_id={user_id}&first_name={first_name}'
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not has_phone:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        contact_button = KeyboardButton(
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç üìû",
            request_contact=True
        )
        kb.row(contact_button)
        return kb.as_markup(resize_keyboard=True)

    kb.button(text="üåê –ú–æ–∏ –∑–∞—è–≤–∫–∏", web_app=WebAppInfo(url=url_applications))
    kb.button(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=url_add_application))
    kb.button(text="‚ÑπÔ∏è –û –Ω–∞—Å")
    if user_id == settings.ADMIN_ID:
        kb.button(text="üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)


def back_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥")
    kb.adjust(1)
    return kb.as_markup(resize_keyboard=True)


def admin_keyboard(user_id: int) -> InlineKeyboardMarkup:
    url_applications = f"{settings.BASE_SITE}/admin_telegram?admin_id={user_id}"
    url_edit_work_days = f'{settings.BASE_SITE}/work_days?user_id={user_id}'
    kb = InlineKeyboardBuilder()
    kb.button(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="back_home")
    kb.button(text="üìù –°–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", web_app=WebAppInfo(url=url_applications))
    kb.button(text="‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏",web_app=WebAppInfo(url=url_edit_work_days))
    kb.adjust(1)
    return kb.as_markup()



def app_keyboard(user_id: int, first_name: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    url_add_application = f'{settings.BASE_SITE}/form?user_id={user_id}&first_name={first_name}'
    kb.button(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", web_app=WebAppInfo(url=url_add_application))
    kb.adjust(1)
    return kb.as_markup()

def applications_list_keyboard(applications: list["Application"]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for app in applications:
        # –ú–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–∞—Ç—É –∏ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
        label = f"{app.appointment_date} {app.client_name}"
        callback_data = f"edit_application:{app.id}"
        kb.button(text=label, callback_data=callback_data)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
    return kb.as_markup()

def services_list_keyboard(services: list["Service"]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for service in services:
        label = service.service_name
        callback_data = f"edit_service:{service.service_id}"
        kb.button(text=label, callback_data=callback_data)
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
    return kb.as_markup()

def masters_list_keyboard(masters: list["Master"]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for master in masters:
        label = master.master_name
        callback_data = f"edit_master:{master.master_id}"
        kb.button(text=label, callback_data=callback_data)
    kb.button(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")
    return kb.as_markup()

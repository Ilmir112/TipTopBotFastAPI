from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, \
    InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.api.service.dao import ServiceDAO
from app.bot.keyboards.kbs import main_keyboard, admin_keyboard
from app.config import settings
from app.pages.router import find_all_service

admin_router = Router()


@admin_router.message(F.text == 'üîë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', F.from_user.id.in_([settings.ADMIN_ID]))
async def admin_panel(message: Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b>!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.",
        reply_markup=admin_keyboard(user_id=message.from_user.id)
    )


@admin_router.callback_query(F.data == 'back_home')
async def cmd_back_home_admin(callback: CallbackQuery):
    await callback.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {callback.from_user.full_name}!")
    await callback.message.answer(
        f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, <b>{callback.from_user.full_name}</b>!\n\n"
        "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —Ä–∞–±–æ—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π. "
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, "
        "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º.\n\n"
        "–ß–µ–º –µ—â–µ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?",
        reply_markup=main_keyboard(user_id=callback.from_user.id,
                                   first_name=callback.from_user.first_name,
                                   has_phone=True)
    )

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@admin_router.callback_query(F.data == "edit_services")
async def handle_edit_application(callback_query: CallbackQuery):
    services = await find_all_service()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Application

    if not services:
        await callback_query.message.answer("–ù–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    kb = []

    for app in services:
        label = f"{app.service_id} {app.service_name} {app.time_work}"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardButton —Å callback_data
        kb.append([InlineKeyboardButton(text=label, callback_data=f"service_{app.service_id}")])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_admin")])

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)

    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

@admin_router.callback_query(F.data.startswith("service_"))
async def handle_service_selection(callback_query: CallbackQuery):
    service_id = callback_query.data.split("_")[1]
    print(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞ ID: {service_id}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    kb = [
        [
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{service_id}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{service_id}")
        ],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_services")]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)

    await callback_query.message.answer(
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å —É—Å–ª—É–≥–æ–π {service_id}?",
        reply_markup=keyboard
    )
@admin_router.callback_query(F.data.startswith("edit_"))
async def handle_edit_service(callback_query: CallbackQuery):
    service_id = callback_query.data.split("_")[1]
    # –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ –±–∞–∑—ã
    service = await ServiceDAO.find_one_or_none_by_id(service_id=service_id)
    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await callback_query.message.answer(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ {service.service_name}.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
    )
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ FSM)

@admin_router.callback_query(F.data.startswith("delete_"))
async def handle_delete_service(callback_query: CallbackQuery):
    service_id = callback_query.data.split("_")[1]
    # –£–¥–∞–ª–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ –±–∞–∑—ã
    success = await ServiceDAO.delete(service_id=int(service_id))
    if success:
        await callback_query.message.answer("–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.")
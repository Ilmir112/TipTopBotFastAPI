import re
from datetime import datetime

from aiogram import types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message

from app.api.applications.dao import ApplicationDAO
from app.api.applications.router import get_booked_times
from app.api.service.router import find_service_all
from app.api.users.dao import UsersDAO
from app.api.users.router import register_user
from app.api.users.schemas import SUsers
from app.api.working_day.dao import WorkingDayDAO
from app.api.working_day.router import find_working_day_all
from app.bot.create_bot import bot
from app.bot.handlers.user_router import user_router
from app.config import settings


class BookingStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_telephone_number = State()
    waiting_for_service = State()
    waiting_for_date = State()
    waiting_for_time = State()


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
create_admin_application_button = InlineKeyboardButton(
    text="üë®‚Äçü¶± –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
    callback_data="start_create_application",
)


@user_router.callback_query(lambda c: c.data == "start_create_application")
async def start_booking(callback: types.CallbackQuery, state: FSMContext):
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(BookingStates.waiting_for_telephone_number)


# –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä)
def validate_phone_number(phone: str) -> bool:
    pattern = r"^\+?\d{10,15}$"  # –ø—Ä–∏–º–µ—Ä: +1234567890 –∏–ª–∏ 1234567890
    return re.match(pattern, phone.strip()) is not None


@user_router.message(StateFilter(BookingStates.waiting_for_telephone_number))
async def process_name(message: Message, state: FSMContext):
    phone = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not validate_phone_number(phone):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä:"
        )
        return  # –æ—Å—Ç–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ
    user = await UsersDAO.find_one_or_none(telephone_number=phone)
    if user:
        await state.update_data(telephone_number=phone)
        await state.update_data(user_id=user.telegram_id)
        await state.update_data(name=user.first_name)
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —É—Å–ª—É–≥–∏.")

        # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –∏—Ö
        services = await find_service_all()
        buttons = [
            InlineKeyboardButton(
                text=service.service_name, callback_data=f"service_{service.service_id}"
            )
            for service in services
        ]
        rows = [buttons[i : i + 4] for i in range(0, len(buttons), 4)]
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)
        await state.set_state(BookingStates.waiting_for_service)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await state.update_data(telephone_number=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞")
        await state.set_state(BookingStates.waiting_for_name)


@user_router.message(StateFilter(BookingStates.waiting_for_name))
async def process_telephone_number(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É—Å–ª—É–≥—É
    await state.update_data(name=message.text)
    name = message.text
    user_data = await state.get_data()

    telephone_number = user_data.get("telephone_number")

    new_user_data = SUsers(
        first_name=name, username=telephone_number, telephone_number=telephone_number
    )

    new_user = await register_user(new_user_data)
    if new_user is None:
        return
    user_id = new_user.telegram_id
    await state.update_data(user_id=user_id)

    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    services = await find_service_all()

    buttons = [
        InlineKeyboardButton(
            text=service.service_name, callback_data=f"service_{service.service_id}"
        )
        for service in services
    ]

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
    rows = [buttons[i : i + 4] for i in range(0, len(buttons), 4)]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=keyboard)
    await state.set_state(BookingStates.waiting_for_name)


@user_router.callback_query(lambda c: c.data.startswith("service_"))
async def service_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data.startswith("service_"):
        service = int(data.split("_")[1])
        await state.update_data(service_id=service)

        # –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞—Ç—ã
        dates = await find_working_day_all()

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏
        date_strings = [
            date.strftime("%d.%m.%Y")
            for date in sorted(dates)
            if date >= datetime.now().date()
        ]

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
        buttons = [
            InlineKeyboardButton(text=date_str, callback_data=f"date_{date_str}")
            for date_str in date_strings
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        rows = [buttons[i : i + 3] for i in range(0, len(buttons), 3)]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ø–∏—Å–∫–æ–≤ —Å–ª–æ–≤–∞—Ä–µ–π
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=keyboard)
        await state.set_state(BookingStates.waiting_for_date)


@user_router.callback_query(lambda c: c.data.startswith("date_"))
async def date_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data.startswith("date_"):
        date_str = data.split("_")[1]
        appointment_date = datetime.strptime(date_str, "%d.%m.%Y")
        await state.update_data(appointment_date=appointment_date)

        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–Ω—è—Ç—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        booked_times = await get_booked_times(
            appointment_date
        )  # –≤—ã–∑–æ–≤ API /get_booked_times

        buttons = [
            InlineKeyboardButton(text=time_str, callback_data=f"time_{time_str}")
            for time_str in booked_times
        ]

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
        rows = [buttons[i : i + 4] for i in range(0, len(buttons), 4)]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)

        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:", reply_markup=keyboard)
        await state.set_state(BookingStates.waiting_for_time)


@user_router.callback_query(lambda c: c.data.startswith("time_"))
async def time_chosen(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data.startswith("time_"):
        appointment_time_str = data.split("_")[1]
        appointment_time = datetime.strptime(appointment_time_str, "%H:%M").time()

        user_data = await state.get_data()

        name = user_data.get("name")
        user_id = user_data.get("user_id")

        service_id = user_data.get("service_id")
        appointment_date = user_data.get("appointment_date")

        working_day = await WorkingDayDAO.find_one_or_none(date=appointment_date)
        appointment_date = appointment_date.strftime("%d.%m.%Y")
        success = await ApplicationDAO.add_appointment_if_available(
            client_name=name,
            service_id=service_id,
            appointment_date=datetime.strptime(appointment_date, "%d.%m.%Y").date(),
            appointment_time=appointment_time,
            user_id=user_id,
            working_day_id=working_day.id,
        )

        if success:
            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É
            message = (
                f"üéâ <b>{name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                "üí¨ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:</b>\n"
                f"üë§ <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> {name}\n"
                # f"‚úÇÔ∏è <b>–ú–∞—Å—Ç–µ—Ä:</b> {master_name}\n"
                f"üìÖ <b>–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏:</b> {appointment_date}\n"
                f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:</b> {appointment_time}\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –Ω–∞—à–µ–≥–æ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–∞!"
                " ‚ú® –ú—ã –∂–¥—ë–º –≤–∞—Å –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
            )

            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_message = (
                "üîî <b>–∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                "üìÑ <b>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</b>\n"
                f"üë§ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {name}\n"
                # f"‚úÇÔ∏è –ú–∞—Å—Ç–µ—Ä: {master_name}\n"
                f"üìÖ –î–∞—Ç–∞: {appointment_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {appointment_time}"
            )
            if user_id:
                if user_id > 52565458:
                    await bot.send_message(chat_id=user_id, text=message)
            for admin_id in settings.ADMIN_LIST:
                await bot.send_message(admin_id, text=admin_message)

            await callback_query.message.edit_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
            await state.clear()
        else:
            # –í—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
            await callback_query.message.edit_text(
                "–≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ."
            )
